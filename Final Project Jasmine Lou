"""
Funtional Specification:

    For our final project, Dina and I decided to make a replica of the game Doodle
Jump. (Some aspects are still in progress.)

    Player Controls: To play, press the ‘s’ key to start creating random springs.
Then, place your mouse where you want to create your sprite and when you’re ready
to create the sprite, press the ‘p’ key and a sprite will appear where your mouse
is. To move your sprite left and right, use the arrow keys.

    Objective: The objective of the game is to have your sprite stay on the screen
for as long as you can by using the springs that randomly start falling. If you hit
the spring, your sprite will automatically jump upwards. Scoring is based on how
long you can keep your sprite from falling off the screen.

    To access our program, find the user ‘jasminelou’ on github and open the file
that reads “Final Project” in Run Python and run the program. A new tab should open
with a black background.

    The graphics in our game are pretty simple and straightforward: Springs are
purple rectangles and the sprite is a blue square.

Design Specification:

	To build our program, we used Python 3, ggame, and runpython.com. We started
by creating two classes: one for the sprite and one for the spring. A third class
was later added on, which controlled the creation of all the springs and the sprite.
Inside the third class, which we called ‘FinalProject’, the program listens for
when certain keys are pressed and responds accordingly. We used the keyboard
recognition functions from ggame to achieve this. When the user presses the ‘s’
key, the class tells the program to look for the definition inside the class that
has to do with the ‘s’ key being pressed. Inside the def spring, the program first
checks if you’ve already created springs, and if you have not, it triggers the
creation of a fourth class called 'RealSprings', and the code inside the RealSprings
class creates them randomly at the top of the screen.

When the user presses the ‘p’ key, the program will go down to the part that defines
what to do when the ‘p’ key is pressed. There, the program checks if you’ve already
created a sprite/player, and if you haven’t, it will create one at the location of
your mouse. We were able to use the mouse tracking function in ggame to make that
happen.


"""

from ggame import App, Color, LineStyle, Sprite, RectangleAsset, CircleAsset, EllipseAsset, PolygonAsset, ImageAsset, Frame
from random import randint

SCREEN_WIDTH = 1000
SCREEN_HEIGHT = 1000

blue = Color(0x58D3F7, 1.0)
black = Color(0x000000, 1.0)
pink = Color(0xFF00FF, 1.0)
red = Color(0x8258FA, 1.0)

thinline = LineStyle(2, pink)
blkline = LineStyle(1, black)
noline = LineStyle(0, blue)
coolline = LineStyle(2, blue)
redline = LineStyle(1, red)
bub = 0
#level = input("level number .01 to 5")

black = Color(0, 1)
bg_asset = RectangleAsset(SCREEN_WIDTH, SCREEN_HEIGHT, noline, black)
bg = Sprite(bg_asset, (0,0))
        
class Spring(Sprite):
    spring = RectangleAsset(1, 1, blkline, black)
    def __init__(self, x, y):
        super().__init__(Spring.spring, (x,y))
        self.x = x
        self.y = y
        self.gravity = 0
        self.springlist = []
        fish = 0
    
    def step(self):
        self.y += 1
        if self.gravity%100 == 0:
            self.springlist.append(RealSpring(randint(1,1000), 0))
        if self.gravity%441 == 0:
            self.springlist.append(RealSpring(randint(333,666), 0))
        self.gravity+=1
        for spring in self.springlist:
            spring.step(self.springlist)

class SSprite(Sprite):
    dog = RectangleAsset(30, 30, coolline, blue)
    def __init__(self, x, y):
        super().__init__(SSprite.dog, (x, y))
        self.x = x
        self.y = y
        
class RealSpring(Sprite): 
    realspring = RectangleAsset(35, 15, blkline, red)
    def __init__(self, x, y):
        super().__init__(RealSpring.realspring, (x,y))
        self.x = x
        self.y = y
        self.gravity = 0
        
    def step(self, springlist):
        global bub
        global level
        self.y += 1
        if self.y > 900:
            self.destroy()
            springlist.remove(self)
        #print(bub)
        #bub = bub+1

gravity = 0

class FinalProject(App):
    def __init__(self, SCREEN_WIDTH, SCREEN_HEIGHT):
        super().__init__()
        self.mousex = 0
        self.mousey = 0
        self.dog = 0
        self.spring = 0
        self.done = 0
        self.dogsprite = None
        self.listenKeyEvent('keydown', 'p', self.buildDog)
        self.listenMouseEvent('mousemove', self.motion)
        self.listenKeyEvent('keydown', 'right arrow', self.moveDogR)
        self.listenKeyEvent('keydown', 'left arrow', self.moveDogL)
        self.listenKeyEvent('keydown', 's', self.buildSpring)
        
    def motion(self, event):
        self.mousex = event.x
        self.mousey = event.y
        
    def buildDog (self, event):
        global gravity
        global bub
        if self.dogsprite:
            self.dogsprite.destroy()
            gravity = 0
        self.dogsprite = SSprite(self.mousex - 15, self.mousey - 15)

        
    def buildSpring(self, event):
        if self.done != 1:
            self.spring = Spring(self.mousex-7.5, self.mousey-2.5)
            self.done = 1
        
    def moveDogR(self, event):
        self.dogsprite.x += 5

    def moveDogL(self, event):
        self.dogsprite.x -= 5

    def step(self):
        global gravity
        global bub
        if self.dogsprite:
            gravity += 0.3
            self.dogsprite.y += gravity
            spcollisions = self.dogsprite.collidingWithSprites(RealSpring)
            if spcollisions:
                gravity = -8
                bub += 1
        springs = self.getSpritesbyClass(Spring)
        for spring in springs:
            spring.step()
        if self.dogsprite:
            if self.dogsprite.y>900 and self.dogsprite.y<950:
                print(bub)
            
myapp = FinalProject(SCREEN_WIDTH, SCREEN_HEIGHT)
myapp.run()